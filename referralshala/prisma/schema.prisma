generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  clerkId         String      @unique
  email           String      @unique
  firstName       String
  lastName        String
  userType        UserType
  contactNumber   String?     @db.VarChar(15)
  profilePicture  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  candidate       Candidate?  @relation("UserToCandidate")
  employer        Employer?   @relation("UserToEmployer")
  educations      Education[] 
  experiences     Experience[]
}

model Candidate {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique @map("user_id")
  skills          Json?
  resume          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation("UserToCandidate", fields: [userId], references: [id], onDelete: Cascade)
}

model Employer {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique @map("user_id")
  companyName     String?      @map("company_name") @db.VarChar(255)
  jobRole         String?      @map("job_role") @db.VarChar(255)
  location        String?     @db.VarChar(255)
  referrals       Referral[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation("UserToEmployer", fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  instituteName     String    @map("institute_name") @db.VarChar(255)
  degree            String    @db.VarChar(255)
  specialization    String   @db.VarChar(255)
  startYear         Int
  endYear           Int
  percentageOrCgpa  Decimal  @map("percentage_or_cgpa") @db.Decimal(5, 2)
  createdAt         DateTime  @default(now())

  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  companyName String    @map("company_name") @db.VarChar(255)
  role        String    @db.VarChar(255)
  startYear   Int
  endYear     Int
  description String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id              Int       @id @default(autoincrement())
  employerId      Int       @map("employer_id")
  jobTitle        String    @map("job_title") @db.VarChar(255)
  jobDescription  String?   @map("job_description")
  jobLink         String?    @map("job_link")
  location        String?   @db.VarChar(255)
  postedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  employer        Employer  @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@index([jobTitle], name: "idx_job_title")
  @@index([employerId], name: "idx_employer_referral")
}

enum UserType {
  CANDIDATE
  EMPLOYER
}
